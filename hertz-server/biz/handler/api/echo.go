// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"

	jsoniter "github.com/json-iterator/go"

	api "hertz_module/biz/model/api"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	client "github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
)

// Echo .
// @router echo/query [GET]
func Echo(ctx context.Context, c *app.RequestContext) {
	// var err error
	// var req api.Request
	// err = c.BindAndValidate(&req)
	// if err != nil {
	// 	c.String(consts.StatusBadRequest, err.Error())
	// 	return
	// }

	p, err := generic.NewThriftFileProvider("../idl/example_service.thrift")
	if err != nil {
		panic(err)
	}
	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		panic(err)
	}
	cli, err := genericclient.NewClient("echo", g, client.WithHostPorts("127.0.0.1:8888"))
	if err != nil {
		panic(err)
	}

	respRpc, err := cli.GenericCall(ctx, "ExampleMethod", string(c.Request.Body())) //pass json through
	if err != nil {
		panic(err)
	}

	var responseData map[string]interface{}
	err = jsoniter.Unmarshal([]byte(respRpc.(string)), &responseData)
	if err != nil {
		panic(err)
	}

	for key, element := range responseData {
		fmt.Println("Key:", key, "=>", "Element:", element)
	}

	Message := responseData["Msg"].(string)

	resp := &api.Response{
		Message: Message,
		Flag:    200,
	}
	c.JSON(consts.StatusOK, resp)
}
