// Code generated by hertz generator.

package api

import (
	"context"
	"fmt"

	jsoniter "github.com/json-iterator/go"

	api "hertz_module/biz/model/api"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	client "github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"

	"github.com/kitex-contrib/registry-nacos/resolver"
	"github.com/nacos-group/nacos-sdk-go/clients"
	"github.com/nacos-group/nacos-sdk-go/common/constant"
	"github.com/nacos-group/nacos-sdk-go/vo"

	"github.com/cloudwego/kitex/pkg/loadbalance"
)

// Echo .
// @router echo/query [GET]
func Echo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.Request
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	method := c.Query("method")
	if method == "" {
		method = "1"
	}

	fmt.Println(req.GetFlag())
	fmt.Println(req.GetMessage())

	p, err := generic.NewThriftFileProvider("../idl/example_service1.thrift")
	if err != nil {
		panic(err)
	}
	g, err := generic.JSONThriftGeneric(p)
	if err != nil {
		panic(err)
	}

	// the nacos server config
	sc := []constant.ServerConfig{
		*constant.NewServerConfig("127.0.0.1", 8848),
	}

	// the nacos client config
	cc := constant.ClientConfig{
		NamespaceId:         "public",
		TimeoutMs:           5000,
		NotLoadCacheAtStart: true,
		LogDir:              "/tmp/nacos/log",
		CacheDir:            "/tmp/nacos/cache",
		LogLevel:            "info",
		Username:            "your-name",
		Password:            "your-password",
	}

	naco_client, err := clients.NewNamingClient(
		vo.NacosClientParam{
			ClientConfig:  &cc,
			ServerConfigs: sc,
		},
	)
	if err != nil {
		panic(err)
	}

	cli, err := genericclient.NewClient(
		"ExampleService1",
		g,
		client.WithResolver(resolver.NewNacosResolver(naco_client)),
		client.WithLoadBalancer(loadbalance.NewWeightedBalancer()),
	)

	if err != nil {
		panic(err)
	}

	jsonString, err := ParseRequest(req.GetMessage())

	if err != nil {
		panic(err)
	}

	respRpc, err := cli.GenericCall(ctx, "ExampleMethod"+method, jsonString) //pass json through
	if err != nil {
		panic(err)
	}

	var responseData map[string]interface{}
	err = jsoniter.Unmarshal([]byte(respRpc.(string)), &responseData)
	if err != nil {
		panic(err)
	}

	for key, element := range responseData {
		fmt.Println("Key:", key, "=>", "Element:", element)
	}

	Message := responseData["Msg"].(string)

	resp := &api.Response{
		Message: Message,
		Flag:    req.GetFlag(),
	}
	c.JSON(consts.StatusOK, resp)
}

func ParseRequest(Message string) (json string, err error) {
	return jsoniter.MarshalToString(
		struct {
			Msg string
		}{
			Msg: Message,
		})
}
